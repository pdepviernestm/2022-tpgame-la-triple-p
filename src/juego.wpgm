import wollok.game.*
import pokemon.*

object cartel{
	var property imagen = "Cartel.png"
	
    method image() = imagen
}
object statsCartel{
	method image() = "StatsCartel.png"
}
object statsCartel2{
	method image() = "StatsCartel.png"
}

object victoria{
	method image() = "Victoria.png"
}
object derrota{
	method image() = "Derrota.png"
}
object batallaFondo{
	method image() = "fondoBatalla.jpg"
}
object fondoSeleccion{
	method image() = "seleccion.jpg"
}


object hpJugador{
	var property text
	var property textColor = "0000FF"
}

object hpCompu{
	var property text
	var property textColor = "0000FF"
}

object lvlJugador{
	var property text
}

object lvlCompu{
	var property text
}

object nombreJugador{
	var property text
}

object nombreCompu{
	var property text
}

object batalla{
	var property pokemonCompu
	var property pokemonJugador
	
	method hud(){
		pokemonJugador.mostrarBack()
		pokemonCompu.seleccionar()
	    lvlJugador.text(pokemonJugador.nivel().toString())
	    lvlCompu.text(pokemonCompu.nivel().toString())
	    nombreJugador.text(pokemonJugador.nombre())
	    nombreCompu.text(pokemonCompu.nombre())
	}
	
	method actualizarVida(pokemon,vida){
		vida.text(pokemon.hp().toString())
		game.schedule(10,{vida.textColor("FF0000")})
		game.schedule(250,{vida.textColor("0000FF")})
	}
	
	method ataqueJugador(){
		seleccionador.posicionActual().efecto(pokemonCompu,pokemonJugador)
		if (seleccionador.posicionActual().tipoDeMovimiento()=="curacion"){
			game.schedule(250,{self.actualizarVida(pokemonJugador,hpJugador)})
		}else{
			game.schedule(250,{self.actualizarVida(pokemonCompu,hpCompu)
				pokemonCompu.heridoFrente()
				game.schedule(100, {pokemonCompu.seleccionar()})
			})
		}	
	}
	
	method ataqueCompu(){
		const indiceRandom = 0.randomUpTo(3).roundUp()
		var movimientoCompu=pokemonCompu.movimientos().get(indiceRandom)
		movimientoCompu.efecto(pokemonJugador,pokemonCompu)
		if (movimientoCompu.tipoDeMovimiento()=="curacion"){
			self.actualizarVida(pokemonCompu,hpCompu)
		}else{
		
			self.actualizarVida(pokemonJugador,hpJugador)
			pokemonJugador.heridoBack()
			game.schedule(100, {pokemonJugador.mostrarBack()})
			
		}
	}
	
	method muerto(pokemon)= pokemon.hp()==0
	
	method anadirVisuals(){
		game.addVisualIn(pokemonJugador,game.at(3,4))
		game.addVisualIn(pokemonCompu,game.at(11,8))
		game.addVisualIn(statsCartel,game.at(11,5))
		game.addVisualIn(statsCartel2,game.at(3,10))
	    game.addVisualIn(hpJugador,game.at(12,6))
	    game.addVisualIn(hpCompu,game.at(4,10))
	    game.addVisualIn(lvlJugador,game.at(12,5))
	    game.addVisualIn(lvlCompu,game.at(4,9))
	    game.addVisualIn(nombreJugador,game.at(12,7))
	    game.addVisualIn(nombreCompu,game.at(4,11))
		game.addVisualIn(cartel, game.at(0,0))
		//							ratio, altura,inicial
		visuals.anadirListaVisuals(game.width()*0.2,3,3)
	}
	method inicializarVida(pokemon,vida){vida.text(pokemon.hp().toString())}
	method start(){
		seleccionador.lista(pokemonJugador.movimientos())
		self.hud()
		self.inicializarVida(pokemonJugador,hpJugador)
		self.inicializarVida(pokemonCompu,hpCompu)
		self.anadirVisuals()
		manager.botones()
	    
	    keyboard.enter().onPressDo({
	     	self.ataqueJugador()
	      	
	     	if(self.muerto(pokemonCompu))
	     	{
	      		game.clear()
	      		finalizarJuego.ganaste(pokemonJugador,pokemonCompu)
	      	}else{
	      		game.schedule(1500,{self.ataqueCompu()
	      			if(self.muerto(pokemonJugador))
	      			{
			      		game.clear()
			      		finalizarJuego.perdiste(pokemonJugador,pokemonCompu)
	      			}
	      		})
	      	}
	     })		
	}
}

object finalizarJuego{
	method setPokemonesInicio(pokemonJugador,pokemonOponente){
		pokemonJugador.deseleccionar()
		pokemonJugador.hp(pokemonJugador.maxHp())
		pokemonOponente.deseleccionar()
		pokemonOponente.hp(pokemonOponente.maxHp())
	}
	
	method ganaste(pokemonJugador,pokemonOponente){
		game.addVisualIn(victoria,game.origin())
		keyboard.c().onPressDo({
			manager.start()
			game.removeVisual(victoria)
			self.setPokemonesInicio(pokemonJugador,pokemonOponente)
		})
		
	}
	
	method perdiste(pokemonJugador,pokemonOponente){
		game.addVisualIn(derrota,game.origin())
		keyboard.c().onPressDo({
			manager.start()
			game.removeVisual(derrota)
			self.setPokemonesInicio(pokemonJugador,pokemonOponente)
		})
	}
}

object seleccionador{
	var property lista 
	var property indice = 0
	
	method moverDerecha(){
		self.posicionActual().deseleccionar()
		indice = 3.min(indice+1)
		self.posicionActual().seleccionar()
	}
	
	method moverIzquierda(){
		self.posicionActual().deseleccionar()
		indice = 0.max(indice-1)
		self.posicionActual().seleccionar()
	}
	
	method posicionActual() = lista.get(indice)
	
	method asignarPokemonCompu(){
		const indiceRandom = 0.randomUpTo(3).roundUp()
		if(indiceRandom!=indice){
			batalla.pokemonCompu(lista.get(indiceRandom))
		}else if(indiceRandom < 3){
			batalla.pokemonCompu(lista.get(indiceRandom+1))
		}else{
			batalla.pokemonCompu(lista.get(indiceRandom-1))
		}
	}
}

object visuals{
	var x
    method anadirListaVisuals(ratio,altura,inicial){
    	x = inicial
    	seleccionador.lista().forEach{elemento => 
				game.addVisualIn(elemento,game.at(x,altura))
				x+=ratio
			}
    }
}

object manager{
	var property listaPokemons = [pikachu,charmander,gengar,bulbasaur]
	
	method botones(){
		keyboard.right().onPressDo({
      		seleccionador.moverDerecha()
    	})
      
    	keyboard.left().onPressDo({
      		seleccionador.moverIzquierda()
    	})
	}

	method start(){
		seleccionador.lista(listaPokemons)
		instanciarTipos.instanciar()
		self.botones()
		//							ratio, altura, inicial
		visuals.anadirListaVisuals(game.width()/4,3,0)
		
		keyboard.space().onPressDo({
      		batalla.pokemonJugador(seleccionador.posicionActual())
      		seleccionador.asignarPokemonCompu()
      		game.clear()
      		game.addVisualIn(batallaFondo, game.origin())
      		batalla.start()
    	})
	}
	
}

program juego {
    game.title("Pokemon")

    game.width(20)
    game.height(15)
    game.boardGround("seleccion.jpg")
	
	manager.start()
    game.start()
}
